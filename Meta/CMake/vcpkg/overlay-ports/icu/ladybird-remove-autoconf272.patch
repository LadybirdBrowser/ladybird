diff --git a/source/configure.ac b/source/configure.ac
index da4f170abfa..28dbff06a4c 100644
--- a/source/configure.ac
+++ b/source/configure.ac
@@ -6,16 +6,15 @@ AC_COPYRIGHT([ Copyright (C) 2016 and later: Unicode, Inc. and others. License &
 
 # NOTE: please use 'autoreconf' to rebuild, otherwise 'aclocal && autoconf'.
 
-# Check for minimum autoconf version. Use exactly this version when rebuilding
-# 'aclocal.m4' and 'configure' for merging upstream, to avoid spurious diffs.
-AC_PREREQ([2.72])
+# Check for autoconf version
+AC_PREREQ(2.69)
 
 # Process this file with autoreconf to produce a configure script
 AC_INIT([ICU],
-        m4_esyscmd_s([sed -n 's/^[ 	]*#[ 	]*define[ 	]*U_ICU_VERSION[ 	]*"\([^"]*\)".*/\1/p' common/unicode/uvernum.h]),
-        [https://icu.unicode.org/bugs],
-        [icu4c],
-        [https://icu.unicode.org/])
+        m4_esyscmd_s([sed -n 's/^[ 	]*#[ 	]*define[ 	]*U_ICU_VERSION[ 	]*"\([^"]*\)".*/\1/p' "./common/unicode/uvernum.h]"),
+        [http://icu-project.org/bugs],
+        [International Components for Unicode],
+        [http://icu-project.org])
 
 # Instruct Python to never write any byte code to the ICU source tree.
 PYTHONDONTWRITEBYTECODE=1
@@ -660,13 +659,14 @@ fi
 AC_SUBST(U_HAVE_DIRENT_H)
 
 # Check for endianness
-AC_C_BIGENDIAN([
-    U_IS_BIG_ENDIAN=1
-    U_ENDIAN_CHAR="b"
-  ], [
-    U_IS_BIG_ENDIAN=0
-    U_ENDIAN_CHAR="l"
-  ], [], AC_MSG_ERROR([universal endianness not supported]))
+AC_C_BIGENDIAN()
+if test $ac_cv_c_bigendian = no; then
+U_IS_BIG_ENDIAN=0
+U_ENDIAN_CHAR="l"
+else
+U_IS_BIG_ENDIAN=1
+U_ENDIAN_CHAR="b"
+fi
 AC_SUBST(U_IS_BIG_ENDIAN)
 
 # Do various POSIX related checks
