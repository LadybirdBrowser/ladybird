
[Exposed=Window, SecureContext]
interface Credential {
    readonly attribute USVString id;
    readonly attribute DOMString type;
    static Promise<boolean> isConditionalMediationAvailable();
    static Promise<undefined> willRequestConditionalCreation();
};


[SecureContext]
interface mixin CredentialUserData {
    readonly attribute USVString name;
    readonly attribute USVString iconURL;
};

dictionary CredentialRequestOptions {
    CredentialMediationRequirement mediation = "optional";
    AbortSignal signal;
};

enum CredentialMediationRequirement {
    "silent",
    "optional",
    "conditional",
    "required"
};

dictionary CredentialCreationOptions {
    CredentialMediationRequirement mediation = "optional";
    AbortSignal signal;
};


dictionary PasswordCredentialData : CredentialData {
    USVString name;
    USVString iconURL;
    required USVString origin;
    required USVString password;
};

typedef (PasswordCredentialData or HTMLFormElement) PasswordCredentialInit;

// partial dictionary CredentialCreationOptions {
//   PasswordCredentialInit password;
// };
